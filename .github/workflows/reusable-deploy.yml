name: Reusable Deploy

on:
  workflow_call:
    inputs:
      project:
        required: false
        type: string
        default: tecpark
      env:
        required: true
        type: string
      tf_version:
        required: false
        type: string
        default: "1.9.5"
      tg_version:
        required: false
        type: string
        default: "0.66.9"

jobs:
  migration:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_IAM_ROLE_ARN }}

      - name: Configure AWS Profile
        id: configure_aws_profile
        run: |
          export AWS_PROFILE="${{ inputs.project }}-${{ inputs.env }}"
          aws configure set credential_source Environment --profile $AWS_PROFILE
          aws configure set role_arn ${{ vars.AWS_GITHUB_ACTIONS_IAM_ROLE_ARN }} --profile $AWS_PROFILE
          echo "aws_profile=$AWS_PROFILE" >> "$GITHUB_OUTPUT"

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set IMAGE_TAG
        id: image_tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t ${{ vars.AWS_MIGRATION_ECR_URL }}:${{ env.IMAGE_TAG }} db/mysql

      - name: Push Docker image to ECR
        run: docker push ${{ vars.AWS_MIGRATION_ECR_URL }}:${{ env.IMAGE_TAG }}

      - name: Set Terragrunt Env
        run: echo "TF_VAR_terragrunt_env=${{ inputs.env }}" >> $GITHUB_ENV

      - name: Plan migration task
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: "infra/env/stg/operation/migration/"
          tg_command: "plan --target=aws_ecs_task_definition.migration"
        env:
          AWS_PROFILE: ${{ steps.configure_aws_profile.outputs.aws_profile }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}

      - name: Apply migration task
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: "infra/env/stg/operation/migration/"
          tg_command: "apply --target=aws_ecs_task_definition.migration"
        env:
          AWS_PROFILE: ${{ steps.configure_aws_profile.outputs.aws_profile }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
